type: edu
custom_name: stage3
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\nimport phonebook.MainKt;\n\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends StageTest {\n    public PhoneBookTest() {\n        super(MainKt.class);\n\
    \    }\n    \n    private long timeOnTestStart;\n    \n    @Override\n    public\
    \ List<TestCase> generate() {\n        timeOnTestStart = System.currentTimeMillis();\n\
    \        return Arrays.asList(\n                new TestCase().setTimeLimit(30\
    \ * 60 * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    import java.io.File
    import kotlin.math.sqrt

    fun main() {
        val phones = File("/Users/dariayerofieieva/Downloads/directory.txt").useLines { it.toList() }
        val search = File("/Users/dariayerofieieva/Downloads/find.txt").useLines { it.toList() }

        println("Start searching (linear search)...")
        val linearResult = linearSearch(phones, search)

        println("\nStart searching (bubble sort + jump search)...")
        bubbleSortSearch(phones, search, linearResult.first)
    }

    fun printSearchResult(entriesCount: Int, found: Int, timeTaken: Long) {
        println("Found $found / $entriesCount entries. Time taken: ${formatMillis(timeTaken)}")
    }

    fun formatMillis(millis: Long): String {
        val min = millis / 1000 / 60
        val sec = millis / 1000 % 60
        val ms = millis % 1000

        return "$min min. $sec sec. $ms ms."
    }

    fun linearSearch(phones: List<String>, search: List<String>): Pair<Long, Int> {
        val startTime = System.currentTimeMillis()

        var found = 0
        for (s in search) {
            for (p in phones) {
                if (s == p.substringAfter(' ')) {
                    found++
                }
            }
        }

        val timeTaken = System.currentTimeMillis() - startTime
        printSearchResult(search.count(), found, timeTaken)

        return timeTaken to found
    }

    fun bubbleSortSearch(phones: List<String>, search: List<String>, linearTimeTaken: Long) {
        val startTime = System.currentTimeMillis()
        val sortedPhones = phones.toMutableList()
        var fastEnough = true
        var sortTimeTaken = 0L

        var emptyGlass: String
        for (i in 0 until sortedPhones.count()) {
            for (j in 0 until sortedPhones.count() - i) {
                sortTimeTaken = System.currentTimeMillis() - startTime
                if (linearTimeTaken < 10 * sortTimeTaken) {
                    fastEnough = false
                    break
                }
                if (sortedPhones[i].substringAfter(' ') > sortedPhones[j].substringAfter(' ')) {
                    emptyGlass = sortedPhones[i]
                    sortedPhones[i] = sortedPhones[j]
                    sortedPhones[j] = emptyGlass
                }
            }
        }

        val (searchResult, skippingLine) = if (fastEnough) {
            jumpSearch(sortedPhones, search, sortTimeTaken) to ""
        } else {
            linearSearch(sortedPhones, search) to " - STOPPED, moved to linear search"
        }

        println("Sorting time: ${formatMillis(sortTimeTaken)}$skippingLine")
        println("Searching time: ${formatMillis(searchResult.first)}")
    }

    fun jumpSearch(phones: List<String>, search: List<String>, sortTimeTaken: Long): Pair<Long, Int> {
        val startTime = System.currentTimeMillis()

        var found = 0
        val loopStep = sqrt(phones.count().toDouble()).toInt()
        for (s in search) {
            for (i in 0 until phones.count() step loopStep) {
                if (s == phones[i].substringAfter(' ')) {
                    found++
                    continue
                }
                if (s < phones[i].substringAfter(' ')) {
                    for (j in i downTo i - loopStep) {
                        if (s == phones[j].substringAfter(' ')) {
                            found++
                            break
                        }
                    }
                }
            }
        }

        val timeTaken = System.currentTimeMillis() - startTime
        printSearchResult(search.count(), found, timeTaken + sortTimeTaken)

        return timeTaken to found
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/478/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/86/stages/478/implement">JetBrains
    Academy</a>
  time: Sun, 12 Jul 2020 15:17:37 UTC
record: 3
